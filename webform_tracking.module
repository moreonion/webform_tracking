<?php
/**
 * @file
 * Adds user-tracking capabilities to webform.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds an option to decide if DNT should be respected to webforms admin
 * settings.
 */
function webform_tracking_form_webform_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['webform_tracking'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Tracking'),
    '#collapsible' => TRUE,
    '#weight' => 10,
  );

  $form['webform_tracking']['webform_tracking_respect_dnt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Respect <a href="http://www.mozilla.org/en-US/dnt/">Do Not Track</a>'),
    '#default_value' => variable_get('webform_tracking_respect_dnt', TRUE),
  );

  array_unshift($form['#submit'], 'webform_tracking_webform_admin_settings_submit');
}

/**
 * Submit handler to set the variable 'webform_tracking_respect_dnt'.
 */
function webform_tracking_webform_admin_settings_submit(&$form, &$form_state) {
  variable_set('webform_tracking_respect_dnt', $form_state['values']['webform_tracking_respect_dnt']);
}


/**
 * Implements hook_boot().
 *
 * Check if we should track the user at all. If so, put the data in the
 * session_cache for later consumption in
 * webform_tracking_webform_submission_insert().
 */
function webform_tracking_boot() {
  // Do not track if Do-Not-Track (DNT) is set, but ignore IE 10 as it sends
  // DNT by default and thus undermindes the concept.
  $ua = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
  $respect_dnt = !preg_match('/MSIE\s*10/', $ua)
    && variable_get('webform_tracking_respect_dnt', TRUE);

  if (empty($_SERVER['HTTP_DNT']) || !$respect_dnt) {
    // We need the session_cache module alreay loaded.
    drupal_load('module', 'session_cache');

    $tags = unserialize(session_cache_get('webform_tracking_tags'));
    if (empty($tags)) {
      $tags = array();
    }
    foreach (array('tag', 'tags') as $parameter) {
      if (isset($_GET[$parameter])) {
        $tags = array_merge($tags, explode(",", check_plain($_GET[$parameter])));
      }
    }
    session_cache_set('webform_tracking_tags', serialize(array_unique($tags)));

    // If the referer does not start with $base_url, it's external but we
    // only take the first external referer to avoid problems with off-site-
    // redirects (e.g. in payment forms).
    // if no referer is send, check if we got one via the GET-parameters
    if (!session_cache_get('webform_tracking_external_referer')) {
      if (isset($_SERVER['HTTP_REFERER']) &&
        strpos($_SERVER['HTTP_REFERER'], $GLOBALS['base_url']) !== 0) {
        session_cache_set('webform_tracking_external_referer', $_SERVER['HTTP_REFERER']);
      }
      elseif (!empty($_GET['external_referer'])) {
        $external_referer = check_plain($_GET['external_referer']);
        if (strpos($external_referer, $GLOBALS['base_url']) !== 0) {
          session_cache_set('webform_tracking_external_referer', $external_referer);
        }
      }
    }

    $history = session_cache_get('webform_tracking_history');
    if (empty($history)) {
      $history = array();
    }
    // Works with webform_ajax.
    if ($_GET['q'] !== 'system/ajax') {
      $length = array_push($history, $GLOBALS['base_url'] . '/' . check_plain($_GET['q']));
      if ($length > 10) {
        // If the history is getting too long, we need at least the following:
        // [0] is the entry page
        // [-3] might be the last page before the form == referer
        // [-2] might be the form
        // [-1] might be the forms /done page
        // 10 is an arbitrary value, you just might want to avoid calling
        // the array functions below on every request if not necessary.
        $history = array_merge(array($history[0]), array_slice($history, -3));
      }
    }
    session_cache_set('webform_tracking_history', $history);

    session_cache_set('webform_tracking_ip_address', ip_address());

    if (function_exists('geoip_country_code_by_name')) {
      // Use @, see: https://bugs.php.net/bug.php?id=59753
      $country = @geoip_country_code_by_name(ip_address());

      include_once DRUPAL_ROOT . '/includes/locale.inc';
      $countries = country_get_list();
      if (isset($countries[$country])) {
        session_cache_set('webform_tracking_country', $country);
      }
    }

    $extra_parameters = array(
        "source", "medium", "version", "other", "term", "campaign");
    $extra_parameters_alias_mapping = array(
      "source" => "s",
      "medium" => "m",
      "version" => "v",
      "other" => "o",
      "term" => "t",
      "campaign" => "c",
    );
    $google_analytics = array(
      "source"   => "utm_source",
      "medium"   => "utm_medium",
      "term"     => "utm_term",
      "version"  => "utm_content",
      "campaign" => "utm_campaign",
    );
    foreach ($extra_parameters as $name) {
      $alias = $extra_parameters_alias_mapping[$name];
      if (array_key_exists($name, $google_analytics)) {
        $google = $google_analytics[$name];
      }
      $value = NULL;
      $value = !empty($_GET[$google]) ? $_GET[$google] : $value;
      $value = !empty($_GET[$alias]) ? $_GET[$alias] : $value;
      $value = !empty($_GET[$name]) ? $_GET[$name] : $value;
      if (!empty($value)) {
        session_cache_set('webform_tracking_' . $name, check_plain($value));
      }
    }

    if (!empty($_GET['refsid'])) {
      session_cache_set('webform_tracking_' . 'refsid', (int)check_plain($_GET['refsid']));
    }
  }
}

/**
 * Add tracking data to submissions objects in $submission->tracking.
 *
 * @param mixed $submissions
 *   A webform submission object or an array of webform submission objects
 *   keyed by their sid.
 */
function webform_tracking_load($submissions) {
  if (is_object($submissions)) {
    $submissions = array($submissions->sid => $submissions);
  }
  $result = db_select('webform_tracking', 't')
    ->fields('t')
    ->condition('sid', array_keys($submissions), 'IN')
    ->execute();
  foreach ($result as $row) {
    $submissions[$row->sid]->tracking = $row;
  }
}

/**
 * Implements hook_webform_submission_insert().
 *
 * Save tracking data along with the submission
 */
function webform_tracking_webform_submission_insert($node, $submission) {
  $parameters = array(
    'tags' => '',
    'ip_address' => '',
    'external_referer' => '',
    'source' => '',
    'medium' => '',
    'version' => '',
    'other' => '',
    'country' => '',
    'term' => '',
    'campaign' => '',
    'refsid' => '',
  );
  foreach ($parameters as $name => $value) {
    $parameters[$name] = session_cache_get('webform_tracking_' . $name);
    // tags are already checked above and another check_plain interferes with
    // (un)serialize().
    if ($name != 'tags') {
      $parameters[$name] = check_plain($parameters[$name]);
    }
    session_cache_set('webform_tracking_' . $name, NULL);
  }
  $parameters['refsid'] = $parameters['refsid'] ? (int) $parameters['refsid'] : NULL;

  $history = session_cache_get('webform_tracking_history');
  $length = count($history);
  session_cache_set('webform_tracking_history', NULL);
  $urls = array(
    'entry_url' => $history[0],
    // The only situation when $history should be < 3 appears if the user opens
    // the form directly, in this case referer and form_url are the same.
    'referer'   => isset($history[$length - 3]) ? $history[$length - 3] : $history[0],
    'form_url'  => isset($history[$length - 2]) ? $history[$length - 2] : $history[0],
  );

  $data = array(
    'nid' => $submission->nid,
    'sid' => $submission->sid,
    'user_id' => session_cache_get_sid(),
  ) + $urls + $parameters;
  $submission->tracking = (object) $data;

  db_insert('webform_tracking')->fields($data)->execute();
}

/**
 * Implements hook_webform_submission_delete().
 *
 * Delete tracking data when the corresponding submission is deleted.
 */
function webform_tracking_webform_submission_delete($node, $submission) {
  db_delete('webform_tracking')
    ->condition('nid', $node->nid)
    ->condition('sid', $submission->sid)
    ->execute();
}

/**
 * Implements hook_webform_submission_load().
 */
function webform_tracking_webform_submission_load(&$submissions) {
  $sids = array_keys($submissions);
  if (empty($sids)) {
    return;
  }
  $result = db_select('webform_tracking', 't')
    ->fields('t')
    ->condition('sid', $sids, 'IN')
    ->execute();
  foreach ($result as $data) {
    $sid = $data->sid;
    unset($data->nid);
    unset($data->sid);
    $data->tags = empty($data->tags) ? array() : unserialize($data->tags);
    $submissions[$sid]->tracking = $data;
  }
}

/**
 * Implements hook_webform_results_download_submission_information_info().
 */
function webform_tracking_webform_results_download_submission_information_info() {
  $p = 'webform_tracking_';
  return array(
    $p . 'referer' => t('Referer'),
    $p . 'external_referer' => t('External referer'),
    $p . 'form_url' => t('Form URL'),
    $p . 'tags' => t('Tags'),
    $p . 'entry_url' => t('Entry URL'),
    $p . 'refsid' => t('Referring SID'),
    $p . 'source' => t('Source'),
    $p . 'medium' => t('Channel'),
    $p . 'version' => t('Version'),
    $p . 'other' => t('Other'),
    $p . 'user_id' => t('User-ID'),
    $p . 'country' => t('Country'),
    $p . 'term' => t('Terms'),
    $p . 'campaign' => t('Campaign'),
  );
}

/**
 * Implements hook_webform_results_download_submission_information_data().
 */
function webform_tracking_webform_results_download_submission_information_data($submission, array $options, $serial_start, $row_count) {
  if (!isset($submission->tracking)) {
    return;
  }
  $data = array();
  $p = 'webform_tracking_';
  foreach ($submission->tracking as $key => $value) {
    $data[$p . $key] = $value;
  }
  if (isset($data[$p . 'tags'])) {
    $data[$p . 'tags'] = implode(', ', $data[$p . 'tags']);
  }
  return $data;
}
